@startuml
skinparam classAttributeIconSize 0

class Main {
- {static} PLAYER_NAMES : String[]
- {static} main(String[] args)
}

class Game {
    - List<Player> players
    - Board board
    - int currentTurn
    + startGame()
    + nextTurn()
    + movePiece(Piece, int steps)
}

class Board {
    - List<Square> squares
    + setupBoard()
    + getSquare(int position) : Square
}

class Piece {
    - Square position
    - Player owner
    - boolean isAtGoal
    + move(int steps)
    + returnToHome()
}

class Player {
    - String name
    - List<Piece> pieces
    - List<FinalPathSquare> finalPath
    - List<HomeSquare> homeSquares
    + rollDice() : int
    + movePiece(Piece, int steps)
    + checkVictory() : boolean
}

class Die {
    - {static} MIN_VALUE : int = 1
    - {static} MAX_VALUE : int = 6
    + roll() : int
}

interface ISquare {
    + enter(Piece piece)
    + leave(Piece piece)
    + isHomeSquare() : boolean
    + isGoalSquare() : boolean
    + isShieldSquare() : boolean
    + isLastGlobalSquare() : boolean
    + moveAndLand(piece : Piece, moves : int) : Square
    + landHereAndSendHome(piece : Piece, moves : int) : Square
    + isEmpty() : boolean
    + sendHome(piece : Piece)
}

abstract class Square implements ISquare {
    # position : int
    # board : Board
    # player : Player
    # piece : Piece


    + enter(Piece piece)
    + leave(Piece piece)
    + isHomeSquare() : boolean
    + isGoalSquare() : boolean
    + isShieldSquare() : boolean
    + isLastGlobalSquare() : boolean
    + moveAndLand(piece : Piece, moves : int) : Square
    + landHereAndSendHome(piece : Piece, moves : int) : Square
    + isEmpty() : boolean
    + sendHome(piece : Piece)
}

class HomeSquare extends Square {
    - Player owner
    + enter(Piece piece)
    + isHomeSquare() : boolean
    + sendHome(piece : Piece)
}

class ShieldSquare extends Square {
    + enter(Piece piece)
    + isShieldSquare() : boolean
}

class RegularSquare extends Square {
    + enter(Piece piece)
    + isEmpty() : boolean
}

class GoalSquare extends Square {
    + enter(Piece piece)
    + isGoalSquare() : boolean
}

class FinalPathSquare extends Square {
    + enter(Piece piece)
}

class LastGlobalSquare extends Square {
    + enter(Piece piece)
    + isLastGlobalSquare() : boolean
}
Main --> Game : starts
Game "1" --> "*" Player
Game "1" --> "1" Board
Player "1" --> "4" Piece
Piece --> Square : occupies
Board --> "0..*" Square
Square <|-- HomeSquare
Square <|-- ShieldSquare
Square <|-- RegularSquare
Square <|-- GoalSquare
Square <|-- FinalPathSquare
Square <|-- LastGlobalSquare

@enduml