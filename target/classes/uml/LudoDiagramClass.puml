@startuml
skinparam classAttributeIconSize 0

class Main {
- {static} PLAYER_NAMES : String[]
- {static} main(String[] args)
}

class Game {
    - players : List<Player>
    - board : Board
    - currentTurn : int

    + Game(playerNames: String[])
    + play()
    - makeBoard()
    - makePlayers(names : String[])
    - initializeGame()
    - placePlayersAtFirstSquare()
    - notOver() : boolean
    - movePlayer(roll : int)
    - currentPlayer() : Player
    + startGame()
    + nextTurn()
    + movePiece(Piece, int steps)
}

class Board {
    - squares : List<Square>
    + setupBoard()
    + getSquare(position : int) : Square
    - globalPath : List<Square>
    - playerFinalPaths : List<List<Square>>
    - setUpGlobalPath() {}
    - setUpPlayerFinalPaths() {}
    - isShieldSquarePosition(position : int) : boolean
    - findSquare(position : int) : Square
    + getPlayerStartSquare(player : Player) : ShieldSquare
    + getSquare(position : int) : Square
    - getPlayerStartPosition(player : Player) : int
}

class Piece {
    - Square position
    - Player owner
    - color : String
    - boolean isAtGoal
    + move(moves : int)
    + getPosition() : int
    + returnToHome()
}

class Player {
    - name : String
    - pieces : List<Piece>
    List<FinalPathSquare> finalPath
    - playing : boolean
    + Player(name : String, pieces : Piece[])
    + movePiece(piece : Piece, moves : int)
    + wins() : boolean
    + isPlaying() : boolean
    + setPlaying(d : boolean)
    + checkVictory() : boolean
    + rollDie() : int
}

class Die {
    - {static} MIN_VALUE : int = 1
    - {static} MAX_VALUE : int = 6
    + roll() : int
}

'interface ISquare {
'    + enter(Piece piece)
'    + leave(Piece piece)
'    + isHomeSquare() : boolean
'    + isGoalSquare() : boolean
'    + isShieldSquare() : boolean
'    + isLastGlobalSquare() : boolean
'    + moveAndLand(piece : Piece, moves : int) : Square
'    + landHereAndSendHome(piece : Piece, moves : int) : Square
'    + isEmpty() : boolean
'    + sendHome(piece : Piece)
'}

abstract class Square {
    # position : int
    # board : Board
    # player : Player
    # piece : Piece
    + enter(piece : Piece)
    + leave(piece : Piece)
    + isHomeSquare() : boolean
    + isGoalSquare() : boolean
    + isShieldSquare() : boolean
    + isLastGlobalSquare() : boolean
    + moveAndLand(piece : Piece, moves : int) : Square
    + landHereAndSendHome(piece : Piece, moves : int) : Square
    + isEmpty() : boolean
    + sendHome(piece : Piece)
}

class ShieldSquare extends Square {
    + enter(piece : Piece)
    + isShieldSquare() : boolean
    + isBarrier() : boolean
    + canLeave(p : Player) : boolean
}

class RegularSquare extends Square {
    + enter(piece : Piece)
    + isEmpty() : boolean
}

class FinalSquare extends Square {
    + enter(piece : Piece)
}

Main --> Game : starts
Game "1" --> "4" Player
Game "1" --> "1" Board
Player "1" --> "4" Piece
Piece --> Square : occupies
Board --> "0..*" Square

Main -[hidden]down-> Game
Game -[hidden]down-> Die
Board -[hidden]down-> Die
@enduml